{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","state","text","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","props","onSubmit","complete","id","shortid","generate","this","onChange","placeholder","onClick","React","Component","Todo","class","item","toggleComplete","delete","TodoList","items","filter","addItem","map","deleteItem","deleteCompletedItems","filterItems","newFilter","length","some","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.760e8746.chunk.js","sourcesContent":["import React from 'react';\r\nimport shortid from 'shortid';\r\n\r\nexport default class TodoForm extends React.Component {\r\n  state = {\r\n    text: ''\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.onSubmit({\r\n      text: this.state.text,\r\n      complete: false,\r\n      id: shortid.generate()\r\n    });\r\n    this.setState({\r\n      text: ''\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          name=\"text\"\r\n          value={this.state.text}\r\n          onChange={this.handleChange}\r\n          placeholder=\"Add an item\"\r\n        />\r\n        <button onClick={this.handleSubmit}>Add Item</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport './Todo.css';\r\n\r\nexport default class Todo extends React.Component {\r\n  render() {\r\n    return (\r\n      <div class=\"todo-container\">\r\n        <div\r\n          class={'todo-item' + (this.props.item.complete ? ' complete' : '')}\r\n          onClick={this.props.toggleComplete}\r\n        >\r\n          {this.props.item.text}\r\n        </div>\r\n        <button onClick={this.props.delete}>x</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nexport default class TodoList extends React.Component {\r\n  state = {\r\n    items: [],\r\n    filter: 'all'\r\n  };\r\n\r\n  addItem = (item) => {\r\n    this.setState({\r\n      items: [item, ...this.state.items]\r\n    });\r\n  };\r\n\r\n  toggleComplete = (id) => {\r\n    this.setState({\r\n      items: this.state.items.map((item) => {\r\n        if (item.id === id) {\r\n          return {\r\n            ...item,\r\n            complete: !item.complete\r\n          };\r\n        } else {\r\n          return item;\r\n        }\r\n      })\r\n    });\r\n  };\r\n\r\n  deleteItem = (id) => {\r\n    this.setState({\r\n      items: this.state.items.filter((item) => item.id !== id)\r\n    });\r\n  };\r\n\r\n  deleteCompletedItems = () => {\r\n    this.setState({\r\n      items: this.state.items.filter((item) => !item.complete)\r\n    });\r\n  };\r\n\r\n  filterItems = (newFilter) => {\r\n    this.setState({\r\n      filter: newFilter\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let items = [];\r\n\r\n    if (this.state.filter === 'active') {\r\n      items = this.state.items.filter((item) => !item.complete);\r\n    } else if (this.state.filter === 'complete') {\r\n      items = this.state.items.filter((item) => item.complete);\r\n    } else {\r\n      // All\r\n      items = this.state.items;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          Active Items:{' '}\r\n          {this.state.items.filter((item) => !item.complete).length}\r\n        </div>\r\n        <TodoForm onSubmit={this.addItem} />\r\n        {items.map((item) => (\r\n          <Todo\r\n            toggleComplete={() => this.toggleComplete(item.id)}\r\n            delete={() => this.deleteItem(item.id)}\r\n            item={item}\r\n          />\r\n        ))}\r\n        <div>\r\n          <button onClick={() => this.filterItems('all')}>All Items</button>\r\n          <button onClick={() => this.filterItems('active')}>\r\n            Active Items\r\n          </button>\r\n          <button onClick={() => this.filterItems('complete')}>\r\n            Completed Items\r\n          </button>\r\n        </div>\r\n        <div>\r\n          {this.state.items.some((item) => item.complete) ? (\r\n            <button onClick={this.deleteCompletedItems}>\r\n              Remove All Completed Items\r\n            </button>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\n\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Todo List</h1>\n        <TodoList />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}